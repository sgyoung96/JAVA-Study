* 캡슐화 (정보 은닉화) : 몇몇 메소드와 필드는 객체 외부와의 인터페이스를 위해 노출시킴 ; 외부에서 클래스 내부의 데이터 접근을 금지
* 상속 : 슈퍼클래스 / 서브 클래스 -> 코드의 재사용을 위함 (중복 코드 작성 방지)
* 다형성 : 같은 이름의 메소드 호출에 대해 객체에 따라 다른 동작을 할 수 있도록 구현 (오버로딩(overloading) / 오버라이딩(overriding))

** 클래스와 객체의 차이?
붕어빵틀 : 클래스
컬러풀한 붕어빵 : 객체

* call-by-value : 값에 의한 호출(인자 전달 방식)
* 생성자의 용도 : 필드를 초기화하거나 객체가 처음 생성되는 순간에 처리할 작업을 수행
this(인자, 인자, 인자) : 동일한 클래스 내의 다른 생성자 호출, 생성자의 첫번째 문장에서 사용되어야 한다.

* static
* 동적 바인딩 : 오버라이딩 된 메소드가 항상 우선적으로 호출된다.